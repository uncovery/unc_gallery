<?phpfunction photos_feed() {    global $wpdb, $UNC_GALLERY;    header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);    // configure appropriately - pontikis.net is used as an example    $a_channel = array(        "title" => get_bloginfo('name'),        "link" => get_bloginfo('url'),        "description" => get_bloginfo('description'),        "language" => get_bloginfo('language'),        "feed_url" => get_bloginfo('url') . "/photos_feed",    );    $rss = new rss_feed($a_channel);    $img_table_name = $wpdb->prefix . "unc_gallery_img";    $att_table_name = $wpdb->prefix . "unc_gallery_att";    $cutoff_date = date('Y-m-d', strtotime("-2 month"));    $file_sql = "SELECT id, file_time FROM `$img_table_name` WHERE file_time > '$cutoff_date 00:00:00' ORDER BY file_time DESC;";    $file_data = $wpdb->get_results($file_sql);    if (count($file_data) == 0) {        error_log("No photos found for feed with cutoff date $cutoff_date");    }    $data_arr = array(        'city' => array('att_group' => 'xmp', 'att_name' => 'city'),        'location' => array('att_group' => 'xmp', 'att_name' => 'location'),        'country' => array('att_group' => 'xmp', 'att_name' => 'country'),        'keywords' => array('att_group' => 'xmp', 'att_name' => 'keywords'),        'gps' => array('att_group' => 'exif', 'att_name' => 'gps'),        'lat' => array('att_group' => 'exif', 'att_name' => 'gps_lat'),        'lon' => array('att_group' => 'exif', 'att_name' => 'gps_lon'),        'focal_length' => array('att_group' => 'exif', 'att_name' => 'focal_length'),        'iso' => array('att_group' => 'exif', 'att_name' => 'iso'),        'fstop' => array('att_group' => 'exif', 'att_name' => 'f'),        'exposure_time' => array('att_group' => 'exif', 'att_name' => 'exposure_time'),        'camera_model' => array('att_group' => 'exif', 'att_name' => 'camera_model'),        'date' => array('att_group' => 'default', 'att_name' => 'date_str'),        'file_url' => array('att_group' => 'default', 'att_name' => 'file_url'),        'map_link_html' => array('att_group' => 'exif', 'att_name' => 'gps_link'),        'width' => array('att_group' => 'exif', 'att_name' => 'file_width'),        'height' => array('att_group' => 'exif', 'att_name' => 'file_height'),        'date_time' => array('att_group' => 'exif', 'att_name' => 'created'),        'name' => array('att_group' => 'xmp', 'att_name' => 'creator'),        'event' => array('att_group' => 'xmp', 'att_name' => 'event'),        'instagram' => array('att_group' => 'xmp', 'att_name' => 'source'),        'people_tags' => array('att_group' => 'xmp', 'att_name' => 'persons_in_image'),    );    foreach ($file_data as $F) {        $file_id = $F->id;        $file_time = $F->file_time;        foreach ($data_arr as $value_name => $fields) {            $error = '';            $filter = '';            foreach ($fields as $column => $value) {                $filter .= " AND `$column` LIKE \"$value\"";            }            $value_data_sql = "SELECT att_value as $value_name FROM `$att_table_name` WHERE `file_id`=$file_id $filter;";            $value_data = $wpdb->get_results($value_data_sql, 'ARRAY_A');            // what if the file does not exist            if (!isset($value_data[0])) {                error_log("ERROR, file $file_id data $value_name in table $att_table_name not found for RSS feed");                $$value_name = '';            // what if the field does not exist            } else if (!isset($value_data[0][$value_name])) {                error_log("ERROR, $value_name data not found for mysql ($value_data_sql)");                $$value_name = false;            // what if the data is empty            } else if ($value_data[0][$value_name] == '') {                $$value_name = false;            } else {                // there can be multiple keywords, let's concatenate then                if (count($value_data) > 1) {                    $value_array = array();                    foreach ($value_data as $value) {                        $value_array[] = $value[$value_name];                    }                    $$value_name = implode(", ", $value_array);                } else {                    $$value_name = $value_data[0][$value_name];                }            }        }        if (!$keywords) {            continue;        }        $name_arr = explode(" ", trim($name));        $first_name = $name_arr[0];        $event_str = '';        if ($event) {            $event_str = " during $event";        }        if (strlen($instagram) > 1) {            $instagram = " ($instagram)";        }        $title = "$keywords taken by $first_name$instagram @ $location$event_str ($city) on $date.";        $hashtags = '';        if (isset($UNC_GALLERY['hashtags'])) {            $hashtags = "<p>" . $UNC_GALLERY['hashtags'] . "</p>";        }        // $description = "<![CDATA[<img width=\"1280\" height=\"960\" src=\"$file_url\" alt=\"$keywords\"><p>$keywords. Photo taken in $location, $city ($country).</p>]]>";        $description = "<![CDATA[            <img width=\"$width\" height=\"$height\" src=\"$file_url\" alt=\"$keywords\">            <p>ISO $iso, f/$fstop, $exposure_time, $focal_length, $camera_model</p>            <p>$hashtags $people_tags</p>            $error]]>";        $feed_item_url = get_site_url() . "/image-detail/?unc_gallery_id=$file_id";        $rss->feed_add_item($title, $feed_item_url, $description, $date_time, get_bloginfo('name'), get_bloginfo('description'), false, $lat, $lon);    }    echo $rss->create_feed();}/** * rss_feed (simple rss 2.0 feed creator php class) * * https://www.pontikis.net/blog/simple-rss-class-create-rss-feed * * @author     Christos Pontikis http://pontikis.net * @copyright  Christos Pontikis * @license    MIT http://opensource.org/licenses/MIT * @version    0.1.0 (28 July 2013) * */class rss_feed {    public $content;    public $channel;    /**     * Constructor     * @param array $a_channel channel properties     * @param string $feed_name feed name     */    public function __construct($a_channel) {        // initialize        $this->channel = $a_channel;    }    public function create_feed() {        global $content;        $xml = '<?xml version="1.0" encoding="UTF-8"?>    <rss version="2.0"        xmlns:content="http://purl.org/rss/1.0/modules/content/"        xmlns:wfw="http://wellformedweb.org/CommentAPI/"        xmlns:dc="http://purl.org/dc/elements/1.1/"        xmlns:atom="http://www.w3.org/2005/Atom"        xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"        xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"        xmlns:slash="http://purl.org/rss/1.0/modules/slash/">        <channel>            <title>' . $this->channel["title"] . '</title>            <link>' . $this->channel["link"] . '</link>            <description>' . $this->channel["description"] . '</description>            <language>' . $this->channel["language"] . '</language>            <atom:link href="' . $this->channel["feed_url"] . '" rel="self" type="application/rss+xml" />';        $xml .= $content;        $xml .= "</channel>\n</rss>";        return $xml;    }    public function feed_add_item($title, $link, $description, $date, $source, $category = false, $text = false, $lat = false, $lon = false) {        global $content;        $content .= "            <item>                <title>$title</title>                <link>$link</link>                <guid>$link</guid>                <description>$description</description>                <pubDate>$date</pubDate>                <source url=\"$link\">$source</source>\n";        if ($content) {            $content .= "                <content:encoded>$text</content:encoded>\n";        }        if ($category) {            $content .= "                <category>$category</category>\n";        }        if ($lat) {            $content .= "                <geo:Point><geo:lat>$lat</geo:lat><geo:long>$lon</geo:long></geo:Point>";        }        $content .= "            </item>\n";        return $this->content;    }}